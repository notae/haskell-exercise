-- :set prompt  "[%s]\n\ESC[31m> \ESC[m"
-- :set prompt2 "\ESC[31m>|\ESC[m"
-- :set prompt  "[%s]\nλ "
-- :set prompt2 "λ|"
:set prompt  "[%s]\n> "
:set prompt2 ">|"

:set +t

let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:def! search return . (":! hoogle --color " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info " ++) . ghciEscapeShellArg

:set -package hscolour
:set -package haskell-src
import qualified Language.Haskell.HsColour as IPHsColour
import qualified Language.Haskell.HsColour.Colourise as IPHsColour
import qualified Language.Haskell.HsColour.Output as IPHsColour
import qualified Language.Haskell.Parser as IPPrint
import qualified Language.Haskell.Pretty as IPPrint
import qualified Text.Read as IPPrint

:def! l \x -> return $ unlines [unwords [":load", x], ":script ~/.ghci_ipprint"]
:def! r \_ -> return $ unlines [":reload", ":script ~/.ghci_ipprint"]
:r
